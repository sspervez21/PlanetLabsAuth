// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "PlanetLabs/AuthService/models"
)

// GetGroupOKCode is the HTTP code returned for type GetGroupOK
const GetGroupOKCode int = 200

/*GetGroupOK OK

swagger:response getGroupOK
*/
type GetGroupOK struct {

	/*
	  Min Items: 1
	  In: Body
	*/
	Payload []string `json:"body,omitempty"`
}

// NewGetGroupOK creates GetGroupOK with default headers values
func NewGetGroupOK() *GetGroupOK {

	return &GetGroupOK{}
}

// WithPayload adds the payload to the get group o k response
func (o *GetGroupOK) WithPayload(payload []string) *GetGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get group o k response
func (o *GetGroupOK) SetPayload(payload []string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]string, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetGroupNotFoundCode is the HTTP code returned for type GetGroupNotFound
const GetGroupNotFoundCode int = 404

/*GetGroupNotFound Group not found

swagger:response getGroupNotFound
*/
type GetGroupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequest `json:"body,omitempty"`
}

// NewGetGroupNotFound creates GetGroupNotFound with default headers values
func NewGetGroupNotFound() *GetGroupNotFound {

	return &GetGroupNotFound{}
}

// WithPayload adds the payload to the get group not found response
func (o *GetGroupNotFound) WithPayload(payload *models.BadRequest) *GetGroupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get group not found response
func (o *GetGroupNotFound) SetPayload(payload *models.BadRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetGroupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
